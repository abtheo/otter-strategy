// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class GainsDaiVault__usersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class GainsDaiVault extends ethereum.SmartContract {
  static bind(address: Address): GainsDaiVault {
    return new GainsDaiVault("GainsDaiVault", address);
  }

  users(param0: Address): GainsDaiVault__usersResult {
    let result = super.call(
      "users",
      "users(address):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new GainsDaiVault__usersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_users(param0: Address): ethereum.CallResult<GainsDaiVault__usersResult> {
    let result = super.tryCall(
      "users",
      "users(address):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GainsDaiVault__usersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  withdrawTimelock(): BigInt {
    let result = super.call(
      "withdrawTimelock",
      "withdrawTimelock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_withdrawTimelock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawTimelock",
      "withdrawTimelock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class WithdrawDaiCall extends ethereum.Call {
  get inputs(): WithdrawDaiCall__Inputs {
    return new WithdrawDaiCall__Inputs(this);
  }

  get outputs(): WithdrawDaiCall__Outputs {
    return new WithdrawDaiCall__Outputs(this);
  }
}

export class WithdrawDaiCall__Inputs {
  _call: WithdrawDaiCall;

  constructor(call: WithdrawDaiCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawDaiCall__Outputs {
  _call: WithdrawDaiCall;

  constructor(call: WithdrawDaiCall) {
    this._call = call;
  }
}
