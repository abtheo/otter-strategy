// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ClaimReward extends ethereum.Event {
  get params(): ClaimReward__Params {
    return new ClaimReward__Params(this);
  }
}

export class ClaimReward__Params {
  _event: ClaimReward;

  constructor(event: ClaimReward) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ClaimRewardToken extends ethereum.Event {
  get params(): ClaimRewardToken__Params {
    return new ClaimRewardToken__Params(this);
  }
}

export class ClaimRewardToken__Params {
  _event: ClaimRewardToken;

  constructor(event: ClaimRewardToken) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get usdcAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Invest extends ethereum.Event {
  get params(): Invest__Params {
    return new Invest__Params(this);
  }
}

export class Invest__Params {
  _event: Invest;

  constructor(event: Invest) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class InvestToken extends ethereum.Event {
  get params(): InvestToken__Params {
    return new InvestToken__Params(this);
  }
}

export class InvestToken__Params {
  _event: InvestToken;

  constructor(event: InvestToken) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get usdcAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NetAssetValueUpdated extends ethereum.Event {
  get params(): NetAssetValueUpdated__Params {
    return new NetAssetValueUpdated__Params(this);
  }
}

export class NetAssetValueUpdated__Params {
  _event: NetAssetValueUpdated;

  constructor(event: NetAssetValueUpdated) {
    this._event = event;
  }

  get from(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get to(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PayoutReward extends ethereum.Event {
  get params(): PayoutReward__Params {
    return new PayoutReward__Params(this);
  }
}

export class PayoutReward__Params {
  _event: PayoutReward;

  constructor(event: PayoutReward) {
    this._event = event;
  }

  get nav(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get revenue(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get payout(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PortfolioManagerUpdated extends ethereum.Event {
  get params(): PortfolioManagerUpdated__Params {
    return new PortfolioManagerUpdated__Params(this);
  }
}

export class PortfolioManagerUpdated__Params {
  _event: PortfolioManagerUpdated;

  constructor(event: PortfolioManagerUpdated) {
    this._event = event;
  }

  get value(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ReinvestRateUpdated extends ethereum.Event {
  get params(): ReinvestRateUpdated__Params {
    return new ReinvestRateUpdated__Params(this);
  }
}

export class ReinvestRateUpdated__Params {
  _event: ReinvestRateUpdated;

  constructor(event: ReinvestRateUpdated) {
    this._event = event;
  }

  get value(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ReinvestStrategyUpdated extends ethereum.Event {
  get params(): ReinvestStrategyUpdated__Params {
    return new ReinvestStrategyUpdated__Params(this);
  }
}

export class ReinvestStrategyUpdated__Params {
  _event: ReinvestStrategyUpdated;

  constructor(event: ReinvestStrategyUpdated) {
    this._event = event;
  }

  get value(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PenroseHedgeLpStrategy__getAssetsPricesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class PenroseHedgeLpStrategy__getDeltaResultDeltaStruct extends ethereum.Tuple {
  get aaveCollateralUsd(): BigInt {
    return this[0].toBigInt();
  }

  get aaveWithdrawUsd(): BigInt {
    return this[1].toBigInt();
  }

  get aaveBorrowMaticNeeded(): BigInt {
    return this[2].toBigInt();
  }

  get aaveRepayMaticNeeded(): BigInt {
    return this[3].toBigInt();
  }

  get wmaticPrice(): BigInt {
    return this[4].toBigInt();
  }

  get usdcPrice(): BigInt {
    return this[5].toBigInt();
  }
}

export class PenroseHedgeLpStrategy__underlyingAssetsResultAssetsStruct extends ethereum.Tuple {
  get usdcBalance(): BigInt {
    return this[0].toBigInt();
  }

  get wmaticBalance(): BigInt {
    return this[1].toBigInt();
  }

  get wmaticBalanceUsdc(): BigInt {
    return this[2].toBigInt();
  }

  get aaveCollateralUsdc(): BigInt {
    return this[3].toBigInt();
  }

  get wmaticDebt(): BigInt {
    return this[4].toBigInt();
  }

  get wmaticDebtUsdc(): BigInt {
    return this[5].toBigInt();
  }

  get usdcInLp(): BigInt {
    return this[6].toBigInt();
  }

  get maticInLp(): BigInt {
    return this[7].toBigInt();
  }

  get maticInLpUsdc(): BigInt {
    return this[8].toBigInt();
  }
}

export class PenroseHedgeLpStrategy extends ethereum.SmartContract {
  static bind(address: Address): PenroseHedgeLpStrategy {
    return new PenroseHedgeLpStrategy("PenroseHedgeLpStrategy", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MANAGER_ROLE(): Bytes {
    let result = super.call("MANAGER_ROLE", "MANAGER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MANAGER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("MANAGER_ROLE", "MANAGER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PORTFOLIO_MANAGER(): Bytes {
    let result = super.call(
      "PORTFOLIO_MANAGER",
      "PORTFOLIO_MANAGER():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PORTFOLIO_MANAGER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PORTFOLIO_MANAGER",
      "PORTFOLIO_MANAGER():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  aUsdc(): Address {
    let result = super.call("aUsdc", "aUsdc():(address)", []);

    return result[0].toAddress();
  }

  try_aUsdc(): ethereum.CallResult<Address> {
    let result = super.tryCall("aUsdc", "aUsdc():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  aaveHealthFactor(): BigInt {
    let result = super.call(
      "aaveHealthFactor",
      "aaveHealthFactor():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_aaveHealthFactor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "aaveHealthFactor",
      "aaveHealthFactor():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  aavePool(): Address {
    let result = super.call("aavePool", "aavePool():(address)", []);

    return result[0].toAddress();
  }

  try_aavePool(): ethereum.CallResult<Address> {
    let result = super.tryCall("aavePool", "aavePool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  aavePoolAddressesProvider(): Address {
    let result = super.call(
      "aavePoolAddressesProvider",
      "aavePoolAddressesProvider():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_aavePoolAddressesProvider(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "aavePoolAddressesProvider",
      "aavePoolAddressesProvider():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  claimAndReinvest(to_: Address): BigInt {
    let result = super.call(
      "claimAndReinvest",
      "claimAndReinvest(address):(uint256)",
      [ethereum.Value.fromAddress(to_)]
    );

    return result[0].toBigInt();
  }

  try_claimAndReinvest(to_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimAndReinvest",
      "claimAndReinvest(address):(uint256)",
      [ethereum.Value.fromAddress(to_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dyst(): Address {
    let result = super.call("dyst", "dyst():(address)", []);

    return result[0].toAddress();
  }

  try_dyst(): ethereum.CallResult<Address> {
    let result = super.tryCall("dyst", "dyst():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dystPair(): Address {
    let result = super.call("dystPair", "dystPair():(address)", []);

    return result[0].toAddress();
  }

  try_dystPair(): ethereum.CallResult<Address> {
    let result = super.tryCall("dystPair", "dystPair():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dystRouter(): Address {
    let result = super.call("dystRouter", "dystRouter():(address)", []);

    return result[0].toAddress();
  }

  try_dystRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall("dystRouter", "dystRouter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAssetsPrices(): PenroseHedgeLpStrategy__getAssetsPricesResult {
    let result = super.call(
      "getAssetsPrices",
      "getAssetsPrices():(uint256,uint256)",
      []
    );

    return new PenroseHedgeLpStrategy__getAssetsPricesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getAssetsPrices(): ethereum.CallResult<
    PenroseHedgeLpStrategy__getAssetsPricesResult
  > {
    let result = super.tryCall(
      "getAssetsPrices",
      "getAssetsPrices():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PenroseHedgeLpStrategy__getAssetsPricesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getDelta(): PenroseHedgeLpStrategy__getDeltaResultDeltaStruct {
    let result = super.call(
      "getDelta",
      "getDelta():((uint256,uint256,uint256,uint256,uint256,uint256))",
      []
    );

    return changetype<PenroseHedgeLpStrategy__getDeltaResultDeltaStruct>(
      result[0].toTuple()
    );
  }

  try_getDelta(): ethereum.CallResult<
    PenroseHedgeLpStrategy__getDeltaResultDeltaStruct
  > {
    let result = super.tryCall(
      "getDelta",
      "getDelta():((uint256,uint256,uint256,uint256,uint256,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PenroseHedgeLpStrategy__getDeltaResultDeltaStruct>(
        value[0].toTuple()
      )
    );
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  invest(token_: Address, amount_: BigInt): BigInt {
    let result = super.call("invest", "invest(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(token_),
      ethereum.Value.fromUnsignedBigInt(amount_)
    ]);

    return result[0].toBigInt();
  }

  try_invest(token_: Address, amount_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("invest", "invest(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(token_),
      ethereum.Value.fromUnsignedBigInt(amount_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastNetAssetValue(): BigInt {
    let result = super.call(
      "lastNetAssetValue",
      "lastNetAssetValue():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastNetAssetValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastNetAssetValue",
      "lastNetAssetValue():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidationThreshold(): BigInt {
    let result = super.call(
      "liquidationThreshold",
      "liquidationThreshold():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidationThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationThreshold",
      "liquidationThreshold():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  netAssetValue(): BigInt {
    let result = super.call("netAssetValue", "netAssetValue():(uint256)", []);

    return result[0].toBigInt();
  }

  try_netAssetValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "netAssetValue",
      "netAssetValue():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pen(): Address {
    let result = super.call("pen", "pen():(address)", []);

    return result[0].toAddress();
  }

  try_pen(): ethereum.CallResult<Address> {
    let result = super.tryCall("pen", "pen():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  penLens(): Address {
    let result = super.call("penLens", "penLens():(address)", []);

    return result[0].toAddress();
  }

  try_penLens(): ethereum.CallResult<Address> {
    let result = super.tryCall("penLens", "penLens():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  penrose(): Address {
    let result = super.call("penrose", "penrose():(address)", []);

    return result[0].toAddress();
  }

  try_penrose(): ethereum.CallResult<Address> {
    let result = super.tryCall("penrose", "penrose():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  portfolioManager(): Address {
    let result = super.call(
      "portfolioManager",
      "portfolioManager():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_portfolioManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "portfolioManager",
      "portfolioManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  reinvestRate(): BigInt {
    let result = super.call("reinvestRate", "reinvestRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_reinvestRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("reinvestRate", "reinvestRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  targetHealthFactor(): BigInt {
    let result = super.call(
      "targetHealthFactor",
      "targetHealthFactor():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_targetHealthFactor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "targetHealthFactor",
      "targetHealthFactor():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  underlyingAssets(): PenroseHedgeLpStrategy__underlyingAssetsResultAssetsStruct {
    let result = super.call(
      "underlyingAssets",
      "underlyingAssets():((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      []
    );

    return changetype<
      PenroseHedgeLpStrategy__underlyingAssetsResultAssetsStruct
    >(result[0].toTuple());
  }

  try_underlyingAssets(): ethereum.CallResult<
    PenroseHedgeLpStrategy__underlyingAssetsResultAssetsStruct
  > {
    let result = super.tryCall(
      "underlyingAssets",
      "underlyingAssets():((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PenroseHedgeLpStrategy__underlyingAssetsResultAssetsStruct>(
        value[0].toTuple()
      )
    );
  }

  usdc(): Address {
    let result = super.call("usdc", "usdc():(address)", []);

    return result[0].toAddress();
  }

  try_usdc(): ethereum.CallResult<Address> {
    let result = super.tryCall("usdc", "usdc():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vWmatic(): Address {
    let result = super.call("vWmatic", "vWmatic():(address)", []);

    return result[0].toAddress();
  }

  try_vWmatic(): ethereum.CallResult<Address> {
    let result = super.tryCall("vWmatic", "vWmatic():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  withdraw(token_: Address, amount_: BigInt): BigInt {
    let result = super.call("withdraw", "withdraw(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(token_),
      ethereum.Value.fromUnsignedBigInt(amount_)
    ]);

    return result[0].toBigInt();
  }

  try_withdraw(token_: Address, amount_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdraw",
      "withdraw(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token_),
        ethereum.Value.fromUnsignedBigInt(amount_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  wmatic(): Address {
    let result = super.call("wmatic", "wmatic():(address)", []);

    return result[0].toAddress();
  }

  try_wmatic(): ethereum.CallResult<Address> {
    let result = super.tryCall("wmatic", "wmatic():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ClaimAndReinvestCall extends ethereum.Call {
  get inputs(): ClaimAndReinvestCall__Inputs {
    return new ClaimAndReinvestCall__Inputs(this);
  }

  get outputs(): ClaimAndReinvestCall__Outputs {
    return new ClaimAndReinvestCall__Outputs(this);
  }
}

export class ClaimAndReinvestCall__Inputs {
  _call: ClaimAndReinvestCall;

  constructor(call: ClaimAndReinvestCall) {
    this._call = call;
  }

  get to_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimAndReinvestCall__Outputs {
  _call: ClaimAndReinvestCall;

  constructor(call: ClaimAndReinvestCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get targetHealthFactor_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get liquidationThreshold_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeNavCall extends ethereum.Call {
  get inputs(): InitializeNavCall__Inputs {
    return new InitializeNavCall__Inputs(this);
  }

  get outputs(): InitializeNavCall__Outputs {
    return new InitializeNavCall__Outputs(this);
  }
}

export class InitializeNavCall__Inputs {
  _call: InitializeNavCall;

  constructor(call: InitializeNavCall) {
    this._call = call;
  }
}

export class InitializeNavCall__Outputs {
  _call: InitializeNavCall;

  constructor(call: InitializeNavCall) {
    this._call = call;
  }
}

export class InvestCall extends ethereum.Call {
  get inputs(): InvestCall__Inputs {
    return new InvestCall__Inputs(this);
  }

  get outputs(): InvestCall__Outputs {
    return new InvestCall__Outputs(this);
  }
}

export class InvestCall__Inputs {
  _call: InvestCall;

  constructor(call: InvestCall) {
    this._call = call;
  }

  get token_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class InvestCall__Outputs {
  _call: InvestCall;

  constructor(call: InvestCall) {
    this._call = call;
  }

  get usdcAmount_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RebalanceCall extends ethereum.Call {
  get inputs(): RebalanceCall__Inputs {
    return new RebalanceCall__Inputs(this);
  }

  get outputs(): RebalanceCall__Outputs {
    return new RebalanceCall__Outputs(this);
  }
}

export class RebalanceCall__Inputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }
}

export class RebalanceCall__Outputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetPortfolioManagerCall extends ethereum.Call {
  get inputs(): SetPortfolioManagerCall__Inputs {
    return new SetPortfolioManagerCall__Inputs(this);
  }

  get outputs(): SetPortfolioManagerCall__Outputs {
    return new SetPortfolioManagerCall__Outputs(this);
  }
}

export class SetPortfolioManagerCall__Inputs {
  _call: SetPortfolioManagerCall;

  constructor(call: SetPortfolioManagerCall) {
    this._call = call;
  }

  get value_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPortfolioManagerCall__Outputs {
  _call: SetPortfolioManagerCall;

  constructor(call: SetPortfolioManagerCall) {
    this._call = call;
  }
}

export class SetReinvestRateCall extends ethereum.Call {
  get inputs(): SetReinvestRateCall__Inputs {
    return new SetReinvestRateCall__Inputs(this);
  }

  get outputs(): SetReinvestRateCall__Outputs {
    return new SetReinvestRateCall__Outputs(this);
  }
}

export class SetReinvestRateCall__Inputs {
  _call: SetReinvestRateCall;

  constructor(call: SetReinvestRateCall) {
    this._call = call;
  }

  get rate_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetReinvestRateCall__Outputs {
  _call: SetReinvestRateCall;

  constructor(call: SetReinvestRateCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get token_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
