// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OperatorStatus extends ethereum.Event {
  get params(): OperatorStatus__Params {
    return new OperatorStatus__Params(this);
  }
}

export class OperatorStatus__Params {
  _event: OperatorStatus;

  constructor(event: OperatorStatus) {
    this._event = event;
  }

  get candidate(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get status(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class OwnerChanged extends ethereum.Event {
  get params(): OwnerChanged__Params {
    return new OwnerChanged__Params(this);
  }
}

export class OwnerChanged__Params {
  _event: OwnerChanged;

  constructor(event: OwnerChanged) {
    this._event = event;
  }

  get oldOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnerNominated extends ethereum.Event {
  get params(): OwnerNominated__Params {
    return new OwnerNominated__Params(this);
  }
}

export class OwnerNominated__Params {
  _event: OwnerNominated;

  constructor(event: OwnerNominated) {
    this._event = event;
  }

  get newOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PartnerStatus extends ethereum.Event {
  get params(): PartnerStatus__Params {
    return new PartnerStatus__Params(this);
  }
}

export class PartnerStatus__Params {
  _event: PartnerStatus;

  constructor(event: PartnerStatus) {
    this._event = event;
  }

  get candidate(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get status(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class PauseChanged extends ethereum.Event {
  get params(): PauseChanged__Params {
    return new PauseChanged__Params(this);
  }
}

export class PauseChanged__Params {
  _event: PauseChanged;

  constructor(event: PauseChanged) {
    this._event = event;
  }

  get isPaused(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class Recovered extends ethereum.Event {
  get params(): Recovered__Params {
    return new Recovered__Params(this);
  }
}

export class Recovered__Params {
  _event: Recovered;

  constructor(event: Recovered) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RewardAdded extends ethereum.Event {
  get params(): RewardAdded__Params {
    return new RewardAdded__Params(this);
  }
}

export class RewardAdded__Params {
  _event: RewardAdded;

  constructor(event: RewardAdded) {
    this._event = event;
  }

  get reward(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RewardPaid extends ethereum.Event {
  get params(): RewardPaid__Params {
    return new RewardPaid__Params(this);
  }
}

export class RewardPaid__Params {
  _event: RewardPaid;

  constructor(event: RewardPaid) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rewardsToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get reward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RewardsDurationUpdated extends ethereum.Event {
  get params(): RewardsDurationUpdated__Params {
    return new RewardsDurationUpdated__Params(this);
  }
}

export class RewardsDurationUpdated__Params {
  _event: RewardsDurationUpdated;

  constructor(event: RewardsDurationUpdated) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newDuration(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Withdrawn extends ethereum.Event {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PenrosePartnerRewards__rewardDataResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class PenrosePartnerRewards extends ethereum.SmartContract {
  static bind(address: Address): PenrosePartnerRewards {
    return new PenrosePartnerRewards("PenrosePartnerRewards", address);
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  earned(account: Address, _rewardsToken: Address): BigInt {
    let result = super.call("earned", "earned(address,address):(uint256)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromAddress(_rewardsToken)
    ]);

    return result[0].toBigInt();
  }

  try_earned(
    account: Address,
    _rewardsToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall("earned", "earned(address,address):(uint256)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromAddress(_rewardsToken)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRewardForDuration(_rewardsToken: Address): BigInt {
    let result = super.call(
      "getRewardForDuration",
      "getRewardForDuration(address):(uint256)",
      [ethereum.Value.fromAddress(_rewardsToken)]
    );

    return result[0].toBigInt();
  }

  try_getRewardForDuration(
    _rewardsToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRewardForDuration",
      "getRewardForDuration(address):(uint256)",
      [ethereum.Value.fromAddress(_rewardsToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isPartner(param0: Address): boolean {
    let result = super.call("isPartner", "isPartner(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isPartner(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPartner", "isPartner(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastPauseTime(): BigInt {
    let result = super.call("lastPauseTime", "lastPauseTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastPauseTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastPauseTime",
      "lastPauseTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastTimeRewardApplicable(_rewardsToken: Address): BigInt {
    let result = super.call(
      "lastTimeRewardApplicable",
      "lastTimeRewardApplicable(address):(uint256)",
      [ethereum.Value.fromAddress(_rewardsToken)]
    );

    return result[0].toBigInt();
  }

  try_lastTimeRewardApplicable(
    _rewardsToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastTimeRewardApplicable",
      "lastTimeRewardApplicable(address):(uint256)",
      [ethereum.Value.fromAddress(_rewardsToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  legacyRewardTokens(param0: BigInt): Address {
    let result = super.call(
      "legacyRewardTokens",
      "legacyRewardTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_legacyRewardTokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "legacyRewardTokens",
      "legacyRewardTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nominatedOwner(): Address {
    let result = super.call("nominatedOwner", "nominatedOwner():(address)", []);

    return result[0].toAddress();
  }

  try_nominatedOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nominatedOwner",
      "nominatedOwner():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  operator(param0: Address): boolean {
    let result = super.call("operator", "operator(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_operator(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("operator", "operator(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proxyStorageInitialized(): boolean {
    let result = super.call(
      "proxyStorageInitialized",
      "proxyStorageInitialized():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_proxyStorageInitialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "proxyStorageInitialized",
      "proxyStorageInitialized():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  rewardData(param0: Address): PenrosePartnerRewards__rewardDataResult {
    let result = super.call(
      "rewardData",
      "rewardData(address):(address,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new PenrosePartnerRewards__rewardDataResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_rewardData(
    param0: Address
  ): ethereum.CallResult<PenrosePartnerRewards__rewardDataResult> {
    let result = super.tryCall(
      "rewardData",
      "rewardData(address):(address,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PenrosePartnerRewards__rewardDataResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  rewardPerToken(_rewardsToken: Address): BigInt {
    let result = super.call(
      "rewardPerToken",
      "rewardPerToken(address):(uint256)",
      [ethereum.Value.fromAddress(_rewardsToken)]
    );

    return result[0].toBigInt();
  }

  try_rewardPerToken(_rewardsToken: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerToken",
      "rewardPerToken(address):(uint256)",
      [ethereum.Value.fromAddress(_rewardsToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardTokens(param0: BigInt): Address {
    let result = super.call("rewardTokens", "rewardTokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_rewardTokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rewardTokens",
      "rewardTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardTokensLength(): BigInt {
    let result = super.call(
      "rewardTokensLength",
      "rewardTokensLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardTokensLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardTokensLength",
      "rewardTokensLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewards(param0: Address, param1: Address): BigInt {
    let result = super.call("rewards", "rewards(address,address):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return result[0].toBigInt();
  }

  try_rewards(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewards",
      "rewards(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakingToken(): Address {
    let result = super.call("stakingToken", "stakingToken():(address)", []);

    return result[0].toAddress();
  }

  try_stakingToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("stakingToken", "stakingToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userRewardPerTokenPaid(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "userRewardPerTokenPaid",
      "userRewardPerTokenPaid(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_userRewardPerTokenPaid(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userRewardPerTokenPaid",
      "userRewardPerTokenPaid(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _stakingToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AddRewardCall extends ethereum.Call {
  get inputs(): AddRewardCall__Inputs {
    return new AddRewardCall__Inputs(this);
  }

  get outputs(): AddRewardCall__Outputs {
    return new AddRewardCall__Outputs(this);
  }
}

export class AddRewardCall__Inputs {
  _call: AddRewardCall;

  constructor(call: AddRewardCall) {
    this._call = call;
  }

  get _rewardsToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _rewardsDistributor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _rewardsDuration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddRewardCall__Outputs {
  _call: AddRewardCall;

  constructor(call: AddRewardCall) {
    this._call = call;
  }
}

export class ExitCall extends ethereum.Call {
  get inputs(): ExitCall__Inputs {
    return new ExitCall__Inputs(this);
  }

  get outputs(): ExitCall__Outputs {
    return new ExitCall__Outputs(this);
  }
}

export class ExitCall__Inputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }
}

export class ExitCall__Outputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }
}

export class GetRewardCall extends ethereum.Call {
  get inputs(): GetRewardCall__Inputs {
    return new GetRewardCall__Inputs(this);
  }

  get outputs(): GetRewardCall__Outputs {
    return new GetRewardCall__Outputs(this);
  }
}

export class GetRewardCall__Inputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }
}

export class GetRewardCall__Outputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }
}

export class InitializeProxyStorageCall extends ethereum.Call {
  get inputs(): InitializeProxyStorageCall__Inputs {
    return new InitializeProxyStorageCall__Inputs(this);
  }

  get outputs(): InitializeProxyStorageCall__Outputs {
    return new InitializeProxyStorageCall__Outputs(this);
  }
}

export class InitializeProxyStorageCall__Inputs {
  _call: InitializeProxyStorageCall;

  constructor(call: InitializeProxyStorageCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _stakingToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeProxyStorageCall__Outputs {
  _call: InitializeProxyStorageCall;

  constructor(call: InitializeProxyStorageCall) {
    this._call = call;
  }
}

export class NominateNewOwnerCall extends ethereum.Call {
  get inputs(): NominateNewOwnerCall__Inputs {
    return new NominateNewOwnerCall__Inputs(this);
  }

  get outputs(): NominateNewOwnerCall__Outputs {
    return new NominateNewOwnerCall__Outputs(this);
  }
}

export class NominateNewOwnerCall__Inputs {
  _call: NominateNewOwnerCall;

  constructor(call: NominateNewOwnerCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class NominateNewOwnerCall__Outputs {
  _call: NominateNewOwnerCall;

  constructor(call: NominateNewOwnerCall) {
    this._call = call;
  }
}

export class NotifyRewardAmountCall extends ethereum.Call {
  get inputs(): NotifyRewardAmountCall__Inputs {
    return new NotifyRewardAmountCall__Inputs(this);
  }

  get outputs(): NotifyRewardAmountCall__Outputs {
    return new NotifyRewardAmountCall__Outputs(this);
  }
}

export class NotifyRewardAmountCall__Inputs {
  _call: NotifyRewardAmountCall;

  constructor(call: NotifyRewardAmountCall) {
    this._call = call;
  }

  get _rewardsToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get reward(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class NotifyRewardAmountCall__Outputs {
  _call: NotifyRewardAmountCall;

  constructor(call: NotifyRewardAmountCall) {
    this._call = call;
  }
}

export class RecoverERC20Call extends ethereum.Call {
  get inputs(): RecoverERC20Call__Inputs {
    return new RecoverERC20Call__Inputs(this);
  }

  get outputs(): RecoverERC20Call__Outputs {
    return new RecoverERC20Call__Outputs(this);
  }
}

export class RecoverERC20Call__Inputs {
  _call: RecoverERC20Call;

  constructor(call: RecoverERC20Call) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RecoverERC20Call__Outputs {
  _call: RecoverERC20Call;

  constructor(call: RecoverERC20Call) {
    this._call = call;
  }
}

export class SetOperatorCall extends ethereum.Call {
  get inputs(): SetOperatorCall__Inputs {
    return new SetOperatorCall__Inputs(this);
  }

  get outputs(): SetOperatorCall__Outputs {
    return new SetOperatorCall__Outputs(this);
  }
}

export class SetOperatorCall__Inputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }

  get candidate(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get status(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetOperatorCall__Outputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }
}

export class SetPartnerCall extends ethereum.Call {
  get inputs(): SetPartnerCall__Inputs {
    return new SetPartnerCall__Inputs(this);
  }

  get outputs(): SetPartnerCall__Outputs {
    return new SetPartnerCall__Outputs(this);
  }
}

export class SetPartnerCall__Inputs {
  _call: SetPartnerCall;

  constructor(call: SetPartnerCall) {
    this._call = call;
  }

  get candidate(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get status(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetPartnerCall__Outputs {
  _call: SetPartnerCall;

  constructor(call: SetPartnerCall) {
    this._call = call;
  }
}

export class SetPausedCall extends ethereum.Call {
  get inputs(): SetPausedCall__Inputs {
    return new SetPausedCall__Inputs(this);
  }

  get outputs(): SetPausedCall__Outputs {
    return new SetPausedCall__Outputs(this);
  }
}

export class SetPausedCall__Inputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }

  get _paused(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPausedCall__Outputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }
}

export class SetRewardsDistributorCall extends ethereum.Call {
  get inputs(): SetRewardsDistributorCall__Inputs {
    return new SetRewardsDistributorCall__Inputs(this);
  }

  get outputs(): SetRewardsDistributorCall__Outputs {
    return new SetRewardsDistributorCall__Outputs(this);
  }
}

export class SetRewardsDistributorCall__Inputs {
  _call: SetRewardsDistributorCall;

  constructor(call: SetRewardsDistributorCall) {
    this._call = call;
  }

  get _rewardsToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _rewardsDistributor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetRewardsDistributorCall__Outputs {
  _call: SetRewardsDistributorCall;

  constructor(call: SetRewardsDistributorCall) {
    this._call = call;
  }
}

export class SetRewardsDurationCall extends ethereum.Call {
  get inputs(): SetRewardsDurationCall__Inputs {
    return new SetRewardsDurationCall__Inputs(this);
  }

  get outputs(): SetRewardsDurationCall__Outputs {
    return new SetRewardsDurationCall__Outputs(this);
  }
}

export class SetRewardsDurationCall__Inputs {
  _call: SetRewardsDurationCall;

  constructor(call: SetRewardsDurationCall) {
    this._call = call;
  }

  get _rewardsToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _rewardsDuration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetRewardsDurationCall__Outputs {
  _call: SetRewardsDurationCall;

  constructor(call: SetRewardsDurationCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class StakeForCall extends ethereum.Call {
  get inputs(): StakeForCall__Inputs {
    return new StakeForCall__Inputs(this);
  }

  get outputs(): StakeForCall__Outputs {
    return new StakeForCall__Outputs(this);
  }
}

export class StakeForCall__Inputs {
  _call: StakeForCall;

  constructor(call: StakeForCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeForCall__Outputs {
  _call: StakeForCall;

  constructor(call: StakeForCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
