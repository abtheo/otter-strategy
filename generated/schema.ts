// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockHash", Value.fromBytes(Bytes.empty()));
    this.set("from", Value.fromBytes(Bytes.empty()));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("gasPrice", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockHash(): Bytes {
    let value = this.get("blockHash");
    return value!.toBytes();
  }

  set blockHash(value: Bytes) {
    this.set("blockHash", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes | null {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes | null) {
    if (!value) {
      this.unset("to");
    } else {
      this.set("to", Value.fromBytes(<Bytes>value));
    }
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("transaction", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("from", Value.fromBytes(Bytes.empty()));
    this.set("to", Value.fromBytes(Bytes.empty()));
    this.set("value", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transfer entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transfer", id.toString(), this);
    }
  }

  static load(id: string): Transfer | null {
    return changetype<Transfer | null>(store.get("Transfer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class ProtocolMetric extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("clamCirculatingSupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalSupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("clamPrice", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("clamBacking", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("marketCap", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("treasuryMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "treasuryMarketValueWithoutClam",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryMaiUsdcMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryMaiUsdcQiInvestmentValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("treasuryMaiMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("treasuryDaiMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "treasuryUsdPlusMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryClamMaiMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryWmaticMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("treasuryQiMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "treasuryTetuQiMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryOtterClamQiMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryQiWmaticMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryQiWmaticQiInvestmentMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryDystopiaPairQiTetuQiMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryDystopiaPairwMaticDystMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryDystopiaPairMaiClamMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryDystopiaPairUSDPLUSClamMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryDystopiaPairUsdcTusdMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryDystopiaPairUsdplusUsdcMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryDystopiaPairUsdplusStMaticMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryDystMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryVeDystMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("treasuryPenMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "treasuryVlPenMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryPenDystMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryMaiStMaticMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryPenroseHedgedMaticMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryKyberswapMaticStMaticHedgedMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryUniV3UsdcMaiStrategyMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryUniV3HedgedMaticUsdcStrategyMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("totalBurnedClam", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "totalBurnedClamMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "totalClamUsdPlusRebaseValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProtocolMetric entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ProtocolMetric entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ProtocolMetric", id.toString(), this);
    }
  }

  static load(id: string): ProtocolMetric | null {
    return changetype<ProtocolMetric | null>(store.get("ProtocolMetric", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get clamCirculatingSupply(): BigDecimal {
    let value = this.get("clamCirculatingSupply");
    return value!.toBigDecimal();
  }

  set clamCirculatingSupply(value: BigDecimal) {
    this.set("clamCirculatingSupply", Value.fromBigDecimal(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value!.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get clamPrice(): BigDecimal {
    let value = this.get("clamPrice");
    return value!.toBigDecimal();
  }

  set clamPrice(value: BigDecimal) {
    this.set("clamPrice", Value.fromBigDecimal(value));
  }

  get clamBacking(): BigDecimal {
    let value = this.get("clamBacking");
    return value!.toBigDecimal();
  }

  set clamBacking(value: BigDecimal) {
    this.set("clamBacking", Value.fromBigDecimal(value));
  }

  get marketCap(): BigDecimal {
    let value = this.get("marketCap");
    return value!.toBigDecimal();
  }

  set marketCap(value: BigDecimal) {
    this.set("marketCap", Value.fromBigDecimal(value));
  }

  get treasuryMarketValue(): BigDecimal {
    let value = this.get("treasuryMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryMarketValue(value: BigDecimal) {
    this.set("treasuryMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryMarketValueWithoutClam(): BigDecimal {
    let value = this.get("treasuryMarketValueWithoutClam");
    return value!.toBigDecimal();
  }

  set treasuryMarketValueWithoutClam(value: BigDecimal) {
    this.set("treasuryMarketValueWithoutClam", Value.fromBigDecimal(value));
  }

  get treasuryMaiUsdcMarketValue(): BigDecimal {
    let value = this.get("treasuryMaiUsdcMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryMaiUsdcMarketValue(value: BigDecimal) {
    this.set("treasuryMaiUsdcMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryMaiUsdcQiInvestmentValue(): BigDecimal {
    let value = this.get("treasuryMaiUsdcQiInvestmentValue");
    return value!.toBigDecimal();
  }

  set treasuryMaiUsdcQiInvestmentValue(value: BigDecimal) {
    this.set("treasuryMaiUsdcQiInvestmentValue", Value.fromBigDecimal(value));
  }

  get treasuryMaiMarketValue(): BigDecimal {
    let value = this.get("treasuryMaiMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryMaiMarketValue(value: BigDecimal) {
    this.set("treasuryMaiMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryDaiMarketValue(): BigDecimal {
    let value = this.get("treasuryDaiMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryDaiMarketValue(value: BigDecimal) {
    this.set("treasuryDaiMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryUsdPlusMarketValue(): BigDecimal {
    let value = this.get("treasuryUsdPlusMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryUsdPlusMarketValue(value: BigDecimal) {
    this.set("treasuryUsdPlusMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryClamMaiMarketValue(): BigDecimal {
    let value = this.get("treasuryClamMaiMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryClamMaiMarketValue(value: BigDecimal) {
    this.set("treasuryClamMaiMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryWmaticMarketValue(): BigDecimal {
    let value = this.get("treasuryWmaticMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryWmaticMarketValue(value: BigDecimal) {
    this.set("treasuryWmaticMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryQiMarketValue(): BigDecimal {
    let value = this.get("treasuryQiMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryQiMarketValue(value: BigDecimal) {
    this.set("treasuryQiMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryTetuQiMarketValue(): BigDecimal {
    let value = this.get("treasuryTetuQiMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryTetuQiMarketValue(value: BigDecimal) {
    this.set("treasuryTetuQiMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryOtterClamQiMarketValue(): BigDecimal {
    let value = this.get("treasuryOtterClamQiMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryOtterClamQiMarketValue(value: BigDecimal) {
    this.set("treasuryOtterClamQiMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryQiWmaticMarketValue(): BigDecimal {
    let value = this.get("treasuryQiWmaticMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryQiWmaticMarketValue(value: BigDecimal) {
    this.set("treasuryQiWmaticMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryQiWmaticQiInvestmentMarketValue(): BigDecimal {
    let value = this.get("treasuryQiWmaticQiInvestmentMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryQiWmaticQiInvestmentMarketValue(value: BigDecimal) {
    this.set(
      "treasuryQiWmaticQiInvestmentMarketValue",
      Value.fromBigDecimal(value)
    );
  }

  get treasuryDystopiaPairQiTetuQiMarketValue(): BigDecimal {
    let value = this.get("treasuryDystopiaPairQiTetuQiMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryDystopiaPairQiTetuQiMarketValue(value: BigDecimal) {
    this.set(
      "treasuryDystopiaPairQiTetuQiMarketValue",
      Value.fromBigDecimal(value)
    );
  }

  get treasuryDystopiaPairwMaticDystMarketValue(): BigDecimal {
    let value = this.get("treasuryDystopiaPairwMaticDystMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryDystopiaPairwMaticDystMarketValue(value: BigDecimal) {
    this.set(
      "treasuryDystopiaPairwMaticDystMarketValue",
      Value.fromBigDecimal(value)
    );
  }

  get treasuryDystopiaPairMaiClamMarketValue(): BigDecimal {
    let value = this.get("treasuryDystopiaPairMaiClamMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryDystopiaPairMaiClamMarketValue(value: BigDecimal) {
    this.set(
      "treasuryDystopiaPairMaiClamMarketValue",
      Value.fromBigDecimal(value)
    );
  }

  get treasuryDystopiaPairUSDPLUSClamMarketValue(): BigDecimal {
    let value = this.get("treasuryDystopiaPairUSDPLUSClamMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryDystopiaPairUSDPLUSClamMarketValue(value: BigDecimal) {
    this.set(
      "treasuryDystopiaPairUSDPLUSClamMarketValue",
      Value.fromBigDecimal(value)
    );
  }

  get treasuryDystopiaPairUsdcTusdMarketValue(): BigDecimal {
    let value = this.get("treasuryDystopiaPairUsdcTusdMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryDystopiaPairUsdcTusdMarketValue(value: BigDecimal) {
    this.set(
      "treasuryDystopiaPairUsdcTusdMarketValue",
      Value.fromBigDecimal(value)
    );
  }

  get treasuryDystopiaPairUsdplusUsdcMarketValue(): BigDecimal {
    let value = this.get("treasuryDystopiaPairUsdplusUsdcMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryDystopiaPairUsdplusUsdcMarketValue(value: BigDecimal) {
    this.set(
      "treasuryDystopiaPairUsdplusUsdcMarketValue",
      Value.fromBigDecimal(value)
    );
  }

  get treasuryDystopiaPairUsdplusStMaticMarketValue(): BigDecimal {
    let value = this.get("treasuryDystopiaPairUsdplusStMaticMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryDystopiaPairUsdplusStMaticMarketValue(value: BigDecimal) {
    this.set(
      "treasuryDystopiaPairUsdplusStMaticMarketValue",
      Value.fromBigDecimal(value)
    );
  }

  get treasuryDystMarketValue(): BigDecimal {
    let value = this.get("treasuryDystMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryDystMarketValue(value: BigDecimal) {
    this.set("treasuryDystMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryVeDystMarketValue(): BigDecimal {
    let value = this.get("treasuryVeDystMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryVeDystMarketValue(value: BigDecimal) {
    this.set("treasuryVeDystMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryPenMarketValue(): BigDecimal {
    let value = this.get("treasuryPenMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryPenMarketValue(value: BigDecimal) {
    this.set("treasuryPenMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryVlPenMarketValue(): BigDecimal {
    let value = this.get("treasuryVlPenMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryVlPenMarketValue(value: BigDecimal) {
    this.set("treasuryVlPenMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryPenDystMarketValue(): BigDecimal {
    let value = this.get("treasuryPenDystMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryPenDystMarketValue(value: BigDecimal) {
    this.set("treasuryPenDystMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryMaiStMaticMarketValue(): BigDecimal {
    let value = this.get("treasuryMaiStMaticMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryMaiStMaticMarketValue(value: BigDecimal) {
    this.set("treasuryMaiStMaticMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryPenroseHedgedMaticMarketValue(): BigDecimal {
    let value = this.get("treasuryPenroseHedgedMaticMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryPenroseHedgedMaticMarketValue(value: BigDecimal) {
    this.set(
      "treasuryPenroseHedgedMaticMarketValue",
      Value.fromBigDecimal(value)
    );
  }

  get treasuryKyberswapMaticStMaticHedgedMarketValue(): BigDecimal {
    let value = this.get("treasuryKyberswapMaticStMaticHedgedMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryKyberswapMaticStMaticHedgedMarketValue(value: BigDecimal) {
    this.set(
      "treasuryKyberswapMaticStMaticHedgedMarketValue",
      Value.fromBigDecimal(value)
    );
  }

  get treasuryUniV3UsdcMaiStrategyMarketValue(): BigDecimal {
    let value = this.get("treasuryUniV3UsdcMaiStrategyMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryUniV3UsdcMaiStrategyMarketValue(value: BigDecimal) {
    this.set(
      "treasuryUniV3UsdcMaiStrategyMarketValue",
      Value.fromBigDecimal(value)
    );
  }

  get treasuryUniV3HedgedMaticUsdcStrategyMarketValue(): BigDecimal {
    let value = this.get("treasuryUniV3HedgedMaticUsdcStrategyMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryUniV3HedgedMaticUsdcStrategyMarketValue(value: BigDecimal) {
    this.set(
      "treasuryUniV3HedgedMaticUsdcStrategyMarketValue",
      Value.fromBigDecimal(value)
    );
  }

  get totalBurnedClam(): BigDecimal {
    let value = this.get("totalBurnedClam");
    return value!.toBigDecimal();
  }

  set totalBurnedClam(value: BigDecimal) {
    this.set("totalBurnedClam", Value.fromBigDecimal(value));
  }

  get totalBurnedClamMarketValue(): BigDecimal {
    let value = this.get("totalBurnedClamMarketValue");
    return value!.toBigDecimal();
  }

  set totalBurnedClamMarketValue(value: BigDecimal) {
    this.set("totalBurnedClamMarketValue", Value.fromBigDecimal(value));
  }

  get totalClamUsdPlusRebaseValue(): BigDecimal {
    let value = this.get("totalClamUsdPlusRebaseValue");
    return value!.toBigDecimal();
  }

  set totalClamUsdPlusRebaseValue(value: BigDecimal) {
    this.set("totalClamUsdPlusRebaseValue", Value.fromBigDecimal(value));
  }
}

export class TotalBurnedClam extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("burnedClam", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("burnedValueUsd", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TotalBurnedClam entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TotalBurnedClam entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TotalBurnedClam", id.toString(), this);
    }
  }

  static load(id: string): TotalBurnedClam | null {
    return changetype<TotalBurnedClam | null>(store.get("TotalBurnedClam", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get burnedClam(): BigDecimal {
    let value = this.get("burnedClam");
    return value!.toBigDecimal();
  }

  set burnedClam(value: BigDecimal) {
    this.set("burnedClam", Value.fromBigDecimal(value));
  }

  get burnedValueUsd(): BigDecimal {
    let value = this.get("burnedValueUsd");
    return value!.toBigDecimal();
  }

  set burnedValueUsd(value: BigDecimal) {
    this.set("burnedValueUsd", Value.fromBigDecimal(value));
  }
}

export class Harvest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("transaction", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Harvest entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Harvest entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Harvest", id.toString(), this);
    }
  }

  static load(id: string): Harvest | null {
    return changetype<Harvest | null>(store.get("Harvest", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class ClaimReward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("transaction", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("amountUsd", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amountToken", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("token", Value.fromBytes(Bytes.empty()));
    this.set("lastBlock", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ClaimReward entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ClaimReward entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ClaimReward", id.toString(), this);
    }
  }

  static load(id: string): ClaimReward | null {
    return changetype<ClaimReward | null>(store.get("ClaimReward", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get amountUsd(): BigDecimal {
    let value = this.get("amountUsd");
    return value!.toBigDecimal();
  }

  set amountUsd(value: BigDecimal) {
    this.set("amountUsd", Value.fromBigDecimal(value));
  }

  get amountToken(): BigDecimal {
    let value = this.get("amountToken");
    return value!.toBigDecimal();
  }

  set amountToken(value: BigDecimal) {
    this.set("amountToken", Value.fromBigDecimal(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get lastBlock(): BigInt {
    let value = this.get("lastBlock");
    return value!.toBigInt();
  }

  set lastBlock(value: BigInt) {
    this.set("lastBlock", Value.fromBigInt(value));
  }
}

export class TreasuryRevenue extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("qiClamAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("qiMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("dystClamAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("dystMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("penClamAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("penMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("penDystClamAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("penDystMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("ottopiaClamAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("ottopiaMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("ldoClamAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("ldoMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("usdPlusClamAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("usdPlusMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("daiClamAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("daiMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("kncClamAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("kncMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("usdcClamAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("usdcMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("maiClamAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("maiMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("maticClamAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("maticMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalRevenueClamAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "totalRevenueMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TreasuryRevenue entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TreasuryRevenue entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TreasuryRevenue", id.toString(), this);
    }
  }

  static load(id: string): TreasuryRevenue | null {
    return changetype<TreasuryRevenue | null>(store.get("TreasuryRevenue", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get qiClamAmount(): BigDecimal {
    let value = this.get("qiClamAmount");
    return value!.toBigDecimal();
  }

  set qiClamAmount(value: BigDecimal) {
    this.set("qiClamAmount", Value.fromBigDecimal(value));
  }

  get qiMarketValue(): BigDecimal {
    let value = this.get("qiMarketValue");
    return value!.toBigDecimal();
  }

  set qiMarketValue(value: BigDecimal) {
    this.set("qiMarketValue", Value.fromBigDecimal(value));
  }

  get dystClamAmount(): BigDecimal {
    let value = this.get("dystClamAmount");
    return value!.toBigDecimal();
  }

  set dystClamAmount(value: BigDecimal) {
    this.set("dystClamAmount", Value.fromBigDecimal(value));
  }

  get dystMarketValue(): BigDecimal {
    let value = this.get("dystMarketValue");
    return value!.toBigDecimal();
  }

  set dystMarketValue(value: BigDecimal) {
    this.set("dystMarketValue", Value.fromBigDecimal(value));
  }

  get penClamAmount(): BigDecimal {
    let value = this.get("penClamAmount");
    return value!.toBigDecimal();
  }

  set penClamAmount(value: BigDecimal) {
    this.set("penClamAmount", Value.fromBigDecimal(value));
  }

  get penMarketValue(): BigDecimal {
    let value = this.get("penMarketValue");
    return value!.toBigDecimal();
  }

  set penMarketValue(value: BigDecimal) {
    this.set("penMarketValue", Value.fromBigDecimal(value));
  }

  get penDystClamAmount(): BigDecimal {
    let value = this.get("penDystClamAmount");
    return value!.toBigDecimal();
  }

  set penDystClamAmount(value: BigDecimal) {
    this.set("penDystClamAmount", Value.fromBigDecimal(value));
  }

  get penDystMarketValue(): BigDecimal {
    let value = this.get("penDystMarketValue");
    return value!.toBigDecimal();
  }

  set penDystMarketValue(value: BigDecimal) {
    this.set("penDystMarketValue", Value.fromBigDecimal(value));
  }

  get ottopiaClamAmount(): BigDecimal {
    let value = this.get("ottopiaClamAmount");
    return value!.toBigDecimal();
  }

  set ottopiaClamAmount(value: BigDecimal) {
    this.set("ottopiaClamAmount", Value.fromBigDecimal(value));
  }

  get ottopiaMarketValue(): BigDecimal {
    let value = this.get("ottopiaMarketValue");
    return value!.toBigDecimal();
  }

  set ottopiaMarketValue(value: BigDecimal) {
    this.set("ottopiaMarketValue", Value.fromBigDecimal(value));
  }

  get ldoClamAmount(): BigDecimal {
    let value = this.get("ldoClamAmount");
    return value!.toBigDecimal();
  }

  set ldoClamAmount(value: BigDecimal) {
    this.set("ldoClamAmount", Value.fromBigDecimal(value));
  }

  get ldoMarketValue(): BigDecimal {
    let value = this.get("ldoMarketValue");
    return value!.toBigDecimal();
  }

  set ldoMarketValue(value: BigDecimal) {
    this.set("ldoMarketValue", Value.fromBigDecimal(value));
  }

  get usdPlusClamAmount(): BigDecimal {
    let value = this.get("usdPlusClamAmount");
    return value!.toBigDecimal();
  }

  set usdPlusClamAmount(value: BigDecimal) {
    this.set("usdPlusClamAmount", Value.fromBigDecimal(value));
  }

  get usdPlusMarketValue(): BigDecimal {
    let value = this.get("usdPlusMarketValue");
    return value!.toBigDecimal();
  }

  set usdPlusMarketValue(value: BigDecimal) {
    this.set("usdPlusMarketValue", Value.fromBigDecimal(value));
  }

  get daiClamAmount(): BigDecimal {
    let value = this.get("daiClamAmount");
    return value!.toBigDecimal();
  }

  set daiClamAmount(value: BigDecimal) {
    this.set("daiClamAmount", Value.fromBigDecimal(value));
  }

  get daiMarketValue(): BigDecimal {
    let value = this.get("daiMarketValue");
    return value!.toBigDecimal();
  }

  set daiMarketValue(value: BigDecimal) {
    this.set("daiMarketValue", Value.fromBigDecimal(value));
  }

  get kncClamAmount(): BigDecimal {
    let value = this.get("kncClamAmount");
    return value!.toBigDecimal();
  }

  set kncClamAmount(value: BigDecimal) {
    this.set("kncClamAmount", Value.fromBigDecimal(value));
  }

  get kncMarketValue(): BigDecimal {
    let value = this.get("kncMarketValue");
    return value!.toBigDecimal();
  }

  set kncMarketValue(value: BigDecimal) {
    this.set("kncMarketValue", Value.fromBigDecimal(value));
  }

  get usdcClamAmount(): BigDecimal {
    let value = this.get("usdcClamAmount");
    return value!.toBigDecimal();
  }

  set usdcClamAmount(value: BigDecimal) {
    this.set("usdcClamAmount", Value.fromBigDecimal(value));
  }

  get usdcMarketValue(): BigDecimal {
    let value = this.get("usdcMarketValue");
    return value!.toBigDecimal();
  }

  set usdcMarketValue(value: BigDecimal) {
    this.set("usdcMarketValue", Value.fromBigDecimal(value));
  }

  get maiClamAmount(): BigDecimal {
    let value = this.get("maiClamAmount");
    return value!.toBigDecimal();
  }

  set maiClamAmount(value: BigDecimal) {
    this.set("maiClamAmount", Value.fromBigDecimal(value));
  }

  get maiMarketValue(): BigDecimal {
    let value = this.get("maiMarketValue");
    return value!.toBigDecimal();
  }

  set maiMarketValue(value: BigDecimal) {
    this.set("maiMarketValue", Value.fromBigDecimal(value));
  }

  get maticClamAmount(): BigDecimal {
    let value = this.get("maticClamAmount");
    return value!.toBigDecimal();
  }

  set maticClamAmount(value: BigDecimal) {
    this.set("maticClamAmount", Value.fromBigDecimal(value));
  }

  get maticMarketValue(): BigDecimal {
    let value = this.get("maticMarketValue");
    return value!.toBigDecimal();
  }

  set maticMarketValue(value: BigDecimal) {
    this.set("maticMarketValue", Value.fromBigDecimal(value));
  }

  get totalRevenueClamAmount(): BigDecimal {
    let value = this.get("totalRevenueClamAmount");
    return value!.toBigDecimal();
  }

  set totalRevenueClamAmount(value: BigDecimal) {
    this.set("totalRevenueClamAmount", Value.fromBigDecimal(value));
  }

  get totalRevenueMarketValue(): BigDecimal {
    let value = this.get("totalRevenueMarketValue");
    return value!.toBigDecimal();
  }

  set totalRevenueMarketValue(value: BigDecimal) {
    this.set("totalRevenueMarketValue", Value.fromBigDecimal(value));
  }
}

export class Vote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("vote", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Vote entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Vote", id.toString(), this);
    }
  }

  static load(id: string): Vote | null {
    return changetype<Vote | null>(store.get("Vote", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get vote(): BigDecimal {
    let value = this.get("vote");
    return value!.toBigDecimal();
  }

  set vote(value: BigDecimal) {
    this.set("vote", Value.fromBigDecimal(value));
  }
}

export class VotePosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VotePosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save VotePosition entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("VotePosition", id.toString(), this);
    }
  }

  static load(id: string): VotePosition | null {
    return changetype<VotePosition | null>(store.get("VotePosition", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get votes(): Array<string> | null {
    let value = this.get("votes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set votes(value: Array<string> | null) {
    if (!value) {
      this.unset("votes");
    } else {
      this.set("votes", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class GovernanceMetric extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("qiDaoVeDystAmt", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("dystMarketCap", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("veDystMarketCap", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("penDystMarketCap", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("vlPenMarketCap", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "otterClamVlPenMarketCap",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "otterClamVlPenPercentOwned",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "otterClamVeDystPercentOwned",
      Value.fromBigDecimal(BigDecimal.zero())
    );
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GovernanceMetric entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save GovernanceMetric entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("GovernanceMetric", id.toString(), this);
    }
  }

  static load(id: string): GovernanceMetric | null {
    return changetype<GovernanceMetric | null>(
      store.get("GovernanceMetric", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get qiDaoVeDystAmt(): BigDecimal {
    let value = this.get("qiDaoVeDystAmt");
    return value!.toBigDecimal();
  }

  set qiDaoVeDystAmt(value: BigDecimal) {
    this.set("qiDaoVeDystAmt", Value.fromBigDecimal(value));
  }

  get dystMarketCap(): BigDecimal {
    let value = this.get("dystMarketCap");
    return value!.toBigDecimal();
  }

  set dystMarketCap(value: BigDecimal) {
    this.set("dystMarketCap", Value.fromBigDecimal(value));
  }

  get veDystMarketCap(): BigDecimal {
    let value = this.get("veDystMarketCap");
    return value!.toBigDecimal();
  }

  set veDystMarketCap(value: BigDecimal) {
    this.set("veDystMarketCap", Value.fromBigDecimal(value));
  }

  get penDystMarketCap(): BigDecimal {
    let value = this.get("penDystMarketCap");
    return value!.toBigDecimal();
  }

  set penDystMarketCap(value: BigDecimal) {
    this.set("penDystMarketCap", Value.fromBigDecimal(value));
  }

  get vlPenMarketCap(): BigDecimal {
    let value = this.get("vlPenMarketCap");
    return value!.toBigDecimal();
  }

  set vlPenMarketCap(value: BigDecimal) {
    this.set("vlPenMarketCap", Value.fromBigDecimal(value));
  }

  get otterClamVlPenMarketCap(): BigDecimal {
    let value = this.get("otterClamVlPenMarketCap");
    return value!.toBigDecimal();
  }

  set otterClamVlPenMarketCap(value: BigDecimal) {
    this.set("otterClamVlPenMarketCap", Value.fromBigDecimal(value));
  }

  get otterClamVlPenPercentOwned(): BigDecimal {
    let value = this.get("otterClamVlPenPercentOwned");
    return value!.toBigDecimal();
  }

  set otterClamVlPenPercentOwned(value: BigDecimal) {
    this.set("otterClamVlPenPercentOwned", Value.fromBigDecimal(value));
  }

  get otterClamVeDystPercentOwned(): BigDecimal {
    let value = this.get("otterClamVeDystPercentOwned");
    return value!.toBigDecimal();
  }

  set otterClamVeDystPercentOwned(value: BigDecimal) {
    this.set("otterClamVeDystPercentOwned", Value.fromBigDecimal(value));
  }
}

export class CumulativeValues extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set(
      "rewardPayoutMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CumulativeValues entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CumulativeValues entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CumulativeValues", id.toString(), this);
    }
  }

  static load(id: string): CumulativeValues | null {
    return changetype<CumulativeValues | null>(
      store.get("CumulativeValues", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rewardPayoutMarketValue(): BigDecimal {
    let value = this.get("rewardPayoutMarketValue");
    return value!.toBigDecimal();
  }

  set rewardPayoutMarketValue(value: BigDecimal) {
    this.set("rewardPayoutMarketValue", Value.fromBigDecimal(value));
  }
}

export class PearlBankMetric extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("apr", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("apy", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("rewardRate", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("payoutMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "clamMarketValueWhenPayoutHappens",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "cumulativeRewardPayoutMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "clamPondDepositedClamAmount",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "pearlBankDepositedClamAmount",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "clamPondDepositedUsdValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "pearlBankDepositedUsdValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("totalClamStaked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "totalClamStakedUsdValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PearlBankMetric entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PearlBankMetric entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PearlBankMetric", id.toString(), this);
    }
  }

  static load(id: string): PearlBankMetric | null {
    return changetype<PearlBankMetric | null>(store.get("PearlBankMetric", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get apr(): BigDecimal {
    let value = this.get("apr");
    return value!.toBigDecimal();
  }

  set apr(value: BigDecimal) {
    this.set("apr", Value.fromBigDecimal(value));
  }

  get apy(): BigDecimal {
    let value = this.get("apy");
    return value!.toBigDecimal();
  }

  set apy(value: BigDecimal) {
    this.set("apy", Value.fromBigDecimal(value));
  }

  get rewardRate(): BigDecimal {
    let value = this.get("rewardRate");
    return value!.toBigDecimal();
  }

  set rewardRate(value: BigDecimal) {
    this.set("rewardRate", Value.fromBigDecimal(value));
  }

  get payoutMarketValue(): BigDecimal {
    let value = this.get("payoutMarketValue");
    return value!.toBigDecimal();
  }

  set payoutMarketValue(value: BigDecimal) {
    this.set("payoutMarketValue", Value.fromBigDecimal(value));
  }

  get clamMarketValueWhenPayoutHappens(): BigDecimal {
    let value = this.get("clamMarketValueWhenPayoutHappens");
    return value!.toBigDecimal();
  }

  set clamMarketValueWhenPayoutHappens(value: BigDecimal) {
    this.set("clamMarketValueWhenPayoutHappens", Value.fromBigDecimal(value));
  }

  get cumulativeRewardPayoutMarketValue(): BigDecimal {
    let value = this.get("cumulativeRewardPayoutMarketValue");
    return value!.toBigDecimal();
  }

  set cumulativeRewardPayoutMarketValue(value: BigDecimal) {
    this.set("cumulativeRewardPayoutMarketValue", Value.fromBigDecimal(value));
  }

  get clamPondDepositedClamAmount(): BigDecimal {
    let value = this.get("clamPondDepositedClamAmount");
    return value!.toBigDecimal();
  }

  set clamPondDepositedClamAmount(value: BigDecimal) {
    this.set("clamPondDepositedClamAmount", Value.fromBigDecimal(value));
  }

  get pearlBankDepositedClamAmount(): BigDecimal {
    let value = this.get("pearlBankDepositedClamAmount");
    return value!.toBigDecimal();
  }

  set pearlBankDepositedClamAmount(value: BigDecimal) {
    this.set("pearlBankDepositedClamAmount", Value.fromBigDecimal(value));
  }

  get clamPondDepositedUsdValue(): BigDecimal {
    let value = this.get("clamPondDepositedUsdValue");
    return value!.toBigDecimal();
  }

  set clamPondDepositedUsdValue(value: BigDecimal) {
    this.set("clamPondDepositedUsdValue", Value.fromBigDecimal(value));
  }

  get pearlBankDepositedUsdValue(): BigDecimal {
    let value = this.get("pearlBankDepositedUsdValue");
    return value!.toBigDecimal();
  }

  set pearlBankDepositedUsdValue(value: BigDecimal) {
    this.set("pearlBankDepositedUsdValue", Value.fromBigDecimal(value));
  }

  get totalClamStaked(): BigDecimal {
    let value = this.get("totalClamStaked");
    return value!.toBigDecimal();
  }

  set totalClamStaked(value: BigDecimal) {
    this.set("totalClamStaked", Value.fromBigDecimal(value));
  }

  get totalClamStakedUsdValue(): BigDecimal {
    let value = this.get("totalClamStakedUsdValue");
    return value!.toBigDecimal();
  }

  set totalClamStakedUsdValue(value: BigDecimal) {
    this.set("totalClamStakedUsdValue", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class BuyProduct extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("product_id", Value.fromBigInt(BigInt.zero()));
    this.set("price", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("totalClam", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BuyProduct entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BuyProduct entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BuyProduct", id.toString(), this);
    }
  }

  static load(id: string): BuyProduct | null {
    return changetype<BuyProduct | null>(store.get("BuyProduct", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get product_id(): BigInt {
    let value = this.get("product_id");
    return value!.toBigInt();
  }

  set product_id(value: BigInt) {
    this.set("product_id", Value.fromBigInt(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    return value!.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get totalClam(): BigDecimal {
    let value = this.get("totalClam");
    return value!.toBigDecimal();
  }

  set totalClam(value: BigDecimal) {
    this.set("totalClam", Value.fromBigDecimal(value));
  }
}

export class StakedBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("clamPondBalance", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("clamPondLastPayout", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("clamPondLastPayoutUsd", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("pearlBankBalance", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("pearlBankLastPayout", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StakedBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StakedBalance entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StakedBalance", id.toString(), this);
    }
  }

  static load(id: string): StakedBalance | null {
    return changetype<StakedBalance | null>(store.get("StakedBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get clamPondBalance(): BigDecimal {
    let value = this.get("clamPondBalance");
    return value!.toBigDecimal();
  }

  set clamPondBalance(value: BigDecimal) {
    this.set("clamPondBalance", Value.fromBigDecimal(value));
  }

  get clamPondLastPayout(): BigDecimal {
    let value = this.get("clamPondLastPayout");
    return value!.toBigDecimal();
  }

  set clamPondLastPayout(value: BigDecimal) {
    this.set("clamPondLastPayout", Value.fromBigDecimal(value));
  }

  get clamPondLastPayoutUsd(): BigDecimal {
    let value = this.get("clamPondLastPayoutUsd");
    return value!.toBigDecimal();
  }

  set clamPondLastPayoutUsd(value: BigDecimal) {
    this.set("clamPondLastPayoutUsd", Value.fromBigDecimal(value));
  }

  get pearlBankBalance(): BigDecimal {
    let value = this.get("pearlBankBalance");
    return value!.toBigDecimal();
  }

  set pearlBankBalance(value: BigDecimal) {
    this.set("pearlBankBalance", Value.fromBigDecimal(value));
  }

  get pearlBankLastPayout(): BigDecimal {
    let value = this.get("pearlBankLastPayout");
    return value!.toBigDecimal();
  }

  set pearlBankLastPayout(value: BigDecimal) {
    this.set("pearlBankLastPayout", Value.fromBigDecimal(value));
  }
}

export class AllStakedBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("balances", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AllStakedBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AllStakedBalance entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AllStakedBalance", id.toString(), this);
    }
  }

  static load(id: string): AllStakedBalance | null {
    return changetype<AllStakedBalance | null>(
      store.get("AllStakedBalance", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get balances(): Array<string> {
    let value = this.get("balances");
    return value!.toStringArray();
  }

  set balances(value: Array<string>) {
    this.set("balances", Value.fromStringArray(value));
  }
}

export class Investment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("netAssetValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("protocol", Value.fromString(""));
    this.set("strategy", Value.fromString(""));
    this.set("grossRevenue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("grossApr", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("netRevenue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("netApr", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("rewardTokens", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Investment entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Investment entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Investment", id.toString(), this);
    }
  }

  static load(id: string): Investment | null {
    return changetype<Investment | null>(store.get("Investment", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get netAssetValue(): BigDecimal {
    let value = this.get("netAssetValue");
    return value!.toBigDecimal();
  }

  set netAssetValue(value: BigDecimal) {
    this.set("netAssetValue", Value.fromBigDecimal(value));
  }

  get protocol(): string {
    let value = this.get("protocol");
    return value!.toString();
  }

  set protocol(value: string) {
    this.set("protocol", Value.fromString(value));
  }

  get strategy(): string {
    let value = this.get("strategy");
    return value!.toString();
  }

  set strategy(value: string) {
    this.set("strategy", Value.fromString(value));
  }

  get grossRevenue(): BigDecimal {
    let value = this.get("grossRevenue");
    return value!.toBigDecimal();
  }

  set grossRevenue(value: BigDecimal) {
    this.set("grossRevenue", Value.fromBigDecimal(value));
  }

  get grossApr(): BigDecimal {
    let value = this.get("grossApr");
    return value!.toBigDecimal();
  }

  set grossApr(value: BigDecimal) {
    this.set("grossApr", Value.fromBigDecimal(value));
  }

  get netRevenue(): BigDecimal {
    let value = this.get("netRevenue");
    return value!.toBigDecimal();
  }

  set netRevenue(value: BigDecimal) {
    this.set("netRevenue", Value.fromBigDecimal(value));
  }

  get netApr(): BigDecimal {
    let value = this.get("netApr");
    return value!.toBigDecimal();
  }

  set netApr(value: BigDecimal) {
    this.set("netApr", Value.fromBigDecimal(value));
  }

  get rewardTokens(): Array<string> {
    let value = this.get("rewardTokens");
    return value!.toStringArray();
  }

  set rewardTokens(value: Array<string>) {
    this.set("rewardTokens", Value.fromStringArray(value));
  }
}

export class PayoutReward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("transactionHash", Value.fromString(""));
    this.set("netAssetValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("revenue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("payout", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PayoutReward entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PayoutReward entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PayoutReward", id.toString(), this);
    }
  }

  static load(id: string): PayoutReward | null {
    return changetype<PayoutReward | null>(store.get("PayoutReward", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value!.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get netAssetValue(): BigDecimal {
    let value = this.get("netAssetValue");
    return value!.toBigDecimal();
  }

  set netAssetValue(value: BigDecimal) {
    this.set("netAssetValue", Value.fromBigDecimal(value));
  }

  get revenue(): BigDecimal {
    let value = this.get("revenue");
    return value!.toBigDecimal();
  }

  set revenue(value: BigDecimal) {
    this.set("revenue", Value.fromBigDecimal(value));
  }

  get payout(): BigDecimal {
    let value = this.get("payout");
    return value!.toBigDecimal();
  }

  set payout(value: BigDecimal) {
    this.set("payout", Value.fromBigDecimal(value));
  }
}
