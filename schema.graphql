type Transaction @entity {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  blockHash: Bytes!
  from: Bytes!
  to: Bytes
  value: BigInt!
  gasPrice: BigInt!
}

type Transfer @entity {
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
}

type ProtocolMetric @entity {
  id: ID!
  timestamp: BigInt!
  clamCirculatingSupply: BigDecimal!
  totalSupply: BigDecimal!
  clamPrice: BigDecimal!
  clamBacking: BigDecimal!
  marketCap: BigDecimal!
  treasuryMarketValue: BigDecimal!
  treasuryMarketValueWithoutClam: BigDecimal!
  treasuryMaiUsdcMarketValue: BigDecimal!
  treasuryMaiUsdcQiInvestmentValue: BigDecimal!
  treasuryMaiMarketValue: BigDecimal!
  treasuryDaiMarketValue: BigDecimal!
  treasuryUsdPlusMarketValue: BigDecimal!
  treasuryClamMaiMarketValue: BigDecimal!
  treasuryWmaticMarketValue: BigDecimal!
  treasuryQiMarketValue: BigDecimal!
  treasuryTetuQiMarketValue: BigDecimal!
  treasuryOtterClamQiMarketValue: BigDecimal!
  treasuryQiWmaticMarketValue: BigDecimal!
  treasuryQiWmaticQiInvestmentMarketValue: BigDecimal!
  treasuryDystopiaPairQiTetuQiMarketValue: BigDecimal!
  treasuryDystopiaPairwMaticDystMarketValue: BigDecimal!
  treasuryDystopiaPairMaiClamMarketValue: BigDecimal!
  treasuryDystopiaPairUSDPLUSClamMarketValue: BigDecimal!
  treasuryDystopiaPairUsdcTusdMarketValue: BigDecimal!
  treasuryDystopiaPairUsdplusUsdcMarketValue: BigDecimal!
  treasuryDystopiaPairUsdplusStMaticMarketValue: BigDecimal!
  treasuryDystMarketValue: BigDecimal!
  treasuryVeDystMarketValue: BigDecimal!
  treasuryPenMarketValue: BigDecimal!
  treasuryVlPenMarketValue: BigDecimal!
  treasuryPenDystMarketValue: BigDecimal!
  treasuryMaiStMaticMarketValue: BigDecimal!
  treasuryPenroseHedgedMaticMarketValue: BigDecimal!
  treasuryKyberswapMaticStMaticHedgedMarketValue: BigDecimal!
  treasuryUniV3UsdcMaiStrategyMarketValue: BigDecimal!
  treasuryUniV3HedgedMaticUsdcStrategyMarketValue: BigDecimal!
  totalBurnedClam: BigDecimal!
  totalBurnedClamMarketValue: BigDecimal!
  totalClamUsdPlusRebaseValue: BigDecimal!
}

type TotalBurnedClam @entity {
  id: ID!
  burnedClam: BigDecimal!
  burnedValueUsd: BigDecimal!
}

type Harvest @entity {
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
  amount: BigInt!
}

type ClaimReward @entity {
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
  amountUsd: BigDecimal!
  amountToken: BigDecimal!
  token: Bytes!
  lastBlock: BigInt!
}

type TreasuryRevenue @entity {
  id: ID!
  timestamp: BigInt!
  qiClamAmount: BigDecimal!
  qiMarketValue: BigDecimal!
  dystClamAmount: BigDecimal!
  dystMarketValue: BigDecimal!
  penClamAmount: BigDecimal!
  penMarketValue: BigDecimal!
  penDystClamAmount: BigDecimal!
  penDystMarketValue: BigDecimal!
  ottopiaClamAmount: BigDecimal!
  ottopiaMarketValue: BigDecimal!
  ldoClamAmount: BigDecimal!
  ldoMarketValue: BigDecimal!
  usdPlusClamAmount: BigDecimal!
  usdPlusMarketValue: BigDecimal!
  daiClamAmount: BigDecimal!
  daiMarketValue: BigDecimal!
  kncClamAmount: BigDecimal!
  kncMarketValue: BigDecimal!
  usdcClamAmount: BigDecimal!
  usdcMarketValue: BigDecimal!
  maiClamAmount: BigDecimal!
  maiMarketValue: BigDecimal!
  maticClamAmount: BigDecimal!
  maticMarketValue: BigDecimal!
  totalRevenueClamAmount: BigDecimal!
  totalRevenueMarketValue: BigDecimal!
}

type Vote @entity {
  id: ID! #lp token address
  timestamp: BigInt!
  vote: BigDecimal!
}

type VotePosition @entity {
  id: ID!
  votes: [Vote!]
}

type GovernanceMetric @entity {
  id: ID!
  timestamp: BigInt!
  qiDaoVeDystAmt: BigDecimal!
  dystMarketCap: BigDecimal!
  veDystMarketCap: BigDecimal!
  penDystMarketCap: BigDecimal!
  vlPenMarketCap: BigDecimal!
  otterClamVlPenMarketCap: BigDecimal!
  otterClamVlPenPercentOwned: BigDecimal!
  otterClamVeDystPercentOwned: BigDecimal!
}

type CumulativeValues @entity {
  id: ID! #always equals 'CumulativeValues'
  rewardPayoutMarketValue: BigDecimal!
}

type PearlBankMetric @entity {
  id: ID!
  apr: BigDecimal!
  apy: BigDecimal!
  rewardRate: BigDecimal!
  payoutMarketValue: BigDecimal!
  clamMarketValueWhenPayoutHappens: BigDecimal!
  cumulativeRewardPayoutMarketValue: BigDecimal!

  clamPondDepositedClamAmount: BigDecimal!
  pearlBankDepositedClamAmount: BigDecimal!

  clamPondDepositedUsdValue: BigDecimal!
  pearlBankDepositedUsdValue: BigDecimal!

  totalClamStaked: BigDecimal!
  totalClamStakedUsdValue: BigDecimal!
  timestamp: BigInt!
}

type BuyProduct @entity {
  id: ID!
  product_id: BigInt!
  price: BigDecimal!
  amount: BigInt!
  totalClam: BigDecimal!
}

"""
Tracks the staked balance of every wallet address,
along with the most recent reward payouts
"""
type StakedBalance @entity {
  id: ID! #address
  clamPondBalance: BigDecimal!
  clamPondLastPayout: BigDecimal!
  clamPondLastPayoutUsd: BigDecimal!
  pearlBankBalance: BigDecimal!
  pearlBankLastPayout: BigDecimal!
}

type AllStakedBalance @entity {
  id: ID!
  balances: [StakedBalance!]!
}

type Investment @entity {
  id: ID!
  timestamp: BigInt!
  netAssetValue: BigDecimal!
  protocol: String!
  strategy: String!

  grossRevenue: BigDecimal!
  grossApr: BigDecimal!

  netRevenue: BigDecimal!
  # no, NET POSITION CHANGE PER DAY
  # but why? just do data[0] - data[-1]
  # PnL = NAV1 - NAV2 + Gross Revenue (*30% ?)
  netApr: BigDecimal!

  rewardTokens: [ClaimReward!]!
}

type PayoutReward @entity {
  id: ID!
  transactionHash: Transaction!
  netAssetValue: BigDecimal!
  revenue: BigDecimal!
  payout: BigDecimal!
}
